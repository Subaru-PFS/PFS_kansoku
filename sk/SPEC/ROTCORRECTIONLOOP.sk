#**********************************************************************
# ROTCORRECTIONLOOP
# Loop to Monitor InsRot error and apply correction when necessary 
#**********************************************************************

:Header
    SCRIPT_AUTHOR=Takagi
    SCRIPT_UPDATE=2024.05.16
    OBE_ID=PFS
    OBE_MODE=SPEC
    COMMAND=ROTCORRECTIONLOOP

:Parameter

    THRESHOLD=5

:Command

:start

from "pfsmisc" import inr_med10err

# reset INRERR_10MED
EXEC OBS MEMORY INSTRUMENT_NAME=PFS INRERR_10MED=100;

*SET THRES_INV_MIN=(-1/$THRESHOLD)
*SET THRES_INV_MAX=(1/$THRESHOLD)


:main_start

# set initial parameters to control the loop ON/OFF
EXEC OBS MEMORY INSTRUMENT_NAME=PFS ROTCORLOOP_FLG=1 ;
EXEC OBS MEMORY INSTRUMENT_NAME=PFS INRERR_10MED_INV=100;

EXEC OBS Set_Message Instrument_name=PFS obsinfo1="ROTCORLOOP" obsinfo2=clear obsinfo3="Loop ON..." obsinfo4=clear obsinfo5=clear;

#while (MEMORY.PFS.ROTCORLOOP_FLG) == 1 {
while 0 < !MEMORY.PFS.ROTCORLOOP_FLG {
    {
        # inr_med10err will calculate the INVERSE of median the 10 recent inrerr values.
        # It also will return "0" when the ROTCORRECTIONLOOP is stopped by setting the flag to 0. 
        EXEC OBS MEMORY INSTRUMENT_NAME=PFS INRERR_10MED_INV=(@inr_med10err($THRESHOLD));
    },
    {
        EXEC OBS SLEEP SLEEP_TIME=10 ;
        EXEC OBS CHECK_STATUS MODE=AND TIMEOUT=1200 N1=[MEMORY.PFS.INRERR_10MED_INV $THRES_INV_MIN $THRES_INV_MAX];

        IF !MEMORY.PFS.INRERR_10MED_INV != 0
            asn INR_CORR=1/!MEMORY.PFS.INRERR_10MED_INV 
            Exec OBS Confirmation Instrument_Name=PFS Title="Applying @INR_CORR arcsec offsets, OK?" Dialog=[OK] ;
            #EXEC TSC INSROT_PF MOTOR=ON TELESCOPE=LINK COORD=REL POSITION=-1*(@INR_CORR / 3600);
            EXEC OBS MEMORY INSTRUMENT_NAME=PFS INRERR_10MED_INV=100;
	ENDIF
    };
    }

:main_end

:end


